import os
import sys
import struct

def dsd_to_pcm(input_file_path, output_file_path):
    # Open the input file and read its contents
    with open(input_file_path, "rb") as input_file:
        input_data = input_file.read()

    # Determine the sample rate from the DSD file header
    sample_rate = None
    if input_data[28:32] == b"DSD ":
        sample_rate = int.from_bytes(input_data[36:38], byteorder="big") * 1000
    elif input_data[28:32] == b"SQLI":
        sample_rate = int.from_bytes(input_data[48:50], byteorder="big") * 1000
    else:
        raise ValueError("Unsupported DSD file format")

    # Calculate the size of the input data
    input_size = len(input_data)

    # Calculate the size of the output data
    output_size = input_size * 8

    # Open the output file for writing
    with open(output_file_path, "wb") as output_file:
        # Write the RIFF header
        output_file.write(b"RIFF")
        output_file.write(struct.pack("<I", output_size + 36))
        output_file.write(b"WAVE")

        # Write the fmt subchunk
        output_file.write(b"fmt ")
        output_file.write(struct.pack("<I", 16))
        output_file.write(struct.pack("<H", 0x0001))
        output_file.write(struct.pack("<H", 2))
        output_file.write(struct.pack("<I", sample_rate))
        output_file.write(struct.pack("<I", sample_rate * 2))
        output_file.write(struct.pack("<H", 2))
        output_file.write(struct.pack("<H", 16))

        # Write the data subchunk
        output_file.write(b"data")
        output_file.write(struct.pack("<I", output_size))

        # Convert the data from DSD to PCM and write it to the output file
        for i in range(0, input_size, 8):
            left_data = int.from_bytes(input_data[i:i+4], byteorder="big", signed=True)
            right_data = int.from_bytes(input_data[i+4:i+8], byteorder="big", signed=True)
            output_file.write(struct.pack("<h", left_data >> 8))
            output_file.write(struct.pack("<h", right_data >> 8))

            # Print progress percentage
            progress_percentage = round((i / input_size) * 100, 2)
            sys.stdout.write(f"\rConverting: {progress_percentage}%")
            sys.stdout.flush()

if __name__ == "__main__":
    # Get the input and output file paths from the command line arguments
    input_file_path = sys.argv[1]
    output_file_path = sys.argv[2]

    # Convert the DSD file to PCM
    dsd_to_pcm(input_file_path, output_file_path)
